<html>

<head>
    <link rel="stylesheet" type="text/css" href="../css/board.css">
    <link href='https://fonts.googleapis.com/css?family=Orbitron' rel='stylesheet'>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <script src="../js/ejs.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
</head>

<body>
    <div class="background">
        <div class="palette-column">
        </div>
        <div class="canvas-column">
            <div id="overlay" class="overlay">
                <button id="play-button" class="button">Play</button>
            </div>
            <div id="round-scoreboard" class="score-board-overlay" style="display: none;">
                <div class="score-board-content">
                    <div class="score-title">
                        <p class="round-info">Scoreboard</p>
                    </div>
                    <div class="score-table">
                        <table class="list score" id="round-scoreboard-table">
                        </table>
                    </div>
                </div>
            </div>
            <div id="game-scoreboard" class="overlay" style="display: none;">
            </div>
            <div class="status-bar">
                <div class="round-info">
                    <p id="round-info">Round n of n</p>
                </div>
                <div class="choosen-word">
                    <p id="choosen-word">_ _ _ _</p>
                </div>
                <div class="timer">
                    <p id="timer">00:00</p>
                </div>
            </div>
            <div>
                <canvas id="myCanvas" width="600px" height="550px" class="canvas">
            </div>
        </div>
        <div class = " player-column">
                    <div class="player-section">
                        <table class="list" id="players">
                            <%players.map( player => {%>
                            <tr>
                                <td><%= player.playerName %></td>
                            </tr>
                            <%})%>
                        </table>
                    </div>
                    <div class="chat-section">
                        <ul class="messages" id="messages"></ul>
                        <div class="message-section">
                            <form id="message-form" class="message-form" action="">
                                <input class="message-form-input" placeholder="Type your guess here!" id="m"
                                    autocomplete="off" />
                                <button class="message-form-button">Send</button>
                            </form>
                        </div>
                    </div>
            </div>
        </div>
</body>
<script>
    const socket = io.connect('http://localhost:3300');
    let roomData;
    $(document).ready(function () {
        init();
        joinRoom();
        getPlayers();
    });

    $('#play-button').click(function () {
        console.log('button click');
        $('#overlay').css("display", "none");
        startGame();
    });

    $('#message-form').submit(function (e) {
        console.log('send message');
        e.preventDefault(); // prevents page reloading

        var jsonUserData = JSON.parse(sessionStorage.room);
        var playerData = { playerName: jsonUserData.playerName, roomName: jsonUserData.roomName };
        var data = { message: $('#m').val(), playerData: playerData };

        socket.emit('message', data);
        $('#m').val('');
        return false;
    });

    var ctx;
    var $canvas;
    function init() {
        if (typeof (sessionStorage) != "undefined") {
            roomData = JSON.parse(sessionStorage.room);
            if (roomData.isAdmin === true) {
                $('#overlay').css("display", "block");
            } else {
                $('#overlay').css("display", "none");
            }
        }

        $canvas = $("#myCanvas");
        ctx = $canvas[0].getContext('2d');

        var canvasOffset = $canvas.offset();
        var leftOffset = canvasOffset.left;
        var topOffset = canvasOffset.top;

        console.log($("#myCanvas"));
        var drag = false;
        $canvas.on('mousemove', function (e) {
            if (drag) {
                draw(e.clientX, e.clientY, e);
                sendEventToServer(e);
            }
        });

        $canvas.on('mousedown', function (e) {
            sendEventToServer(e);
            drag = true;
            draw(e.clientX, e.clientY, e);
        });

        $canvas.on('mouseup', function (e) {
            sendEventToServer(e);
            drag = false;
            draw(e.clientX, e.clientY, e);
        });
    };

    function sendEventToServer(e) {
        var jsonUserData = JSON.parse(sessionStorage.room);
        var drawingData = { x: e.clientX, y: e.clientY, type: event.type };
        var userData = { playerName: jsonUserData.playerName, roomName: jsonUserData.roomName };
        var data = { drawingData: drawingData, userData: userData };
        socket.emit('draw', data);
    }

    function joinRoom() {
        if (typeof (sessionStorage) != "undefined") {
            socket.emit('join', sessionStorage.room);
        }
    }

    function getPlayers() {
        if (typeof (sessionStorage) != "undefined") {
            var jsonUserData = JSON.parse(sessionStorage.room);
            let roomName = jsonUserData.roomName;
            $.ajax({
                url: "/getPlayers",
                type: "GET",
                data: { roomName: roomName },
                success: function (data) {
                    let players = JSON.parse(data);
                    let html = ejs.render(`
                        <? players.forEach(player => {?>
                        <tr>
                            <td><?= player.playerName ?></td>
                        </tr>
                        <?}) ?>`, { players: players },
                        { delimiter: '?' });
                    $('#players').html(html);
                }
            });
        }
    }

    function startGame() {
        socket.emit('play', roomData.roomName);
    }

    function draw(x, y, event) {
        var canvasOffset = $canvas.offset();
        var leftOffset = canvasOffset.left;
        var topOffset = canvasOffset.top;
        x = x - leftOffset;
        y = y - topOffset;

        if (event.type == "mousedown") {
            ctx.beginPath()
            ctx.moveTo(x, y)
        }
        else if (event.type == "mousemove") {
            ctx.lineTo(x, y)
            ctx.stroke()
        }
        else if (event.type == "mouseup") {
            ctx.closePath()
        }
    };

    var timerInterval;
    function startTimer(duration, display) {
        var timer = duration, minutes, seconds;
        timerInterval = setInterval(function () {
            minutes = parseInt(timer / 60, 10);
            seconds = parseInt(timer % 60, 10);

            minutes = minutes < 10 ? "0" + minutes : minutes;
            seconds = seconds < 10 ? "0" + seconds : seconds;

            display.textContent = minutes + ":" + seconds;

            if (--timer < 0) {
                timer = duration;
            }
        }, 1000);
    }

    function stopTimer() {
        var display = document.querySelector('#timer');
        display.textContent = "00:00";
        clearInterval(timerInterval);
    }

    function updateRoundInfo(round) {

        let activePlayer = round.players.find(player => player.active === true);
        let isCurrentUserActive = (activePlayer.playerName == roomData.playerName);
        $('#myCanvas').css("pointer-events", (isCurrentUserActive === true ? "auto" : "none"));

        console.log(round);
        let html = ejs.render(`
                        Round <?= roundNo ?> of <?= noOfRounds ?>`,
            { roundNo: round.roundNo, noOfRounds: round.noOfRounds },
            { delimiter: '?' });
        console.log(html);
        $('#round-info').html(html);

        let word = round.word.replace(/[^ ]/gi, '*');
        $('#choosen-word').text(word);
    }

    function displayRoundScoreboard(round) {
        console.log(round);
        let scores = round.scores;
        let html = ejs.render(`
                    <colgroup>
                            <col span="1" style="width: 75%;">
                            <col span="1" style="width: 25%;">
                    </colgroup>                    
                    <? for (var playerName in scores) {?>
                    <tr>
                        <td><?= playerName ?></td>
                        <td><?= scores[playerName] ?></td>
                    </tr>
                    <?} ?>`,
            { scores: scores },
            { delimiter: '?' });
        console.log(html);
        $('#round-scoreboard-table').html(html);
        $('#round-scoreboard').css("display", "block");
    }

    function hideRoundScoreboard() {
        $('#round-scoreboard').css("display", "none");
    }

    socket.on('draw', (event) => {
        var eventJSOn = JSON.stringify(event);
        draw(event.x, event.y, event);
    });

    socket.on('connectToRoom', (message) => {
        console.log(message);
        getPlayers();
    });

    socket.on('event', (message) => {
        console.log(message);
        $('#messages').append($('<li>').text(message));
        getPlayers();
    });

    socket.on('roundStart', (round) => {
        var display = document.querySelector('#timer');
        startTimer(round.round.timeToGuess, display);
        updateRoundInfo(round.round);
        hideRoundScoreboard();
    });

    socket.on('roundEnd', (round) => {
        stopTimer();
        displayRoundScoreboard(round);
    });

    socket.on('message', (messageData) => {
        console.log(messageData);
        let messageJson = JSON.parse(messageData);
        $('#messages').append($('<li>').text(messageJson.player.playerName + ": " + messageJson.message));
    });
</script>

</html>